# Import
import streamlit as st
import pandas as pd
# import lifelines
# import plotly.express as px
# import plotly.graph_objects as go
# import matplotlib as plt
import hydralit_components as hc
from random import randint
from typing import Union

# Import files
import constant
import text
import code_text


# Fonctions
# Lecture du fichier de donn√©es
def load_data() -> pd.DataFrame:
    """Lis le fichier de donn√©es "MockPatientDatabaseOscar.csv" avec l'encodage latin-1"""
    data = pd.read_csv(constant.data_file, sep=";", encoding='latin-1')
    return data


def print_data(data: Union[pd.DataFrame, list]) -> None:
    """
    Cr√©√© une checkbox permettant d'afficher ou non les donn√©es.
    """
    show_data = st.checkbox(
        label="Montrer les donn√©es",
        value=False
    )
    if show_data:
        st.write(data)


def print_code(text: str, key: str, separator: bool = False) -> None:
    """Affiche le texte sous forme de code.\\
    Le param√®tre key permet de donner un identifiant √† la checkbox pour √©viter une erreur qui appara√Æt lorsque
    plusieurs checkbox n'ont pas de cl√©s et ont la m√™me structure.\\
    Le param√®tre separator permet d'afficher une ligne horizontale avant la checkbox pour s√©parer le code de
    la partie pr√©c√©dente de la page.
    """
    if separator:
        st.write("---")
    show_code = st.checkbox(
        label="Montrer le code",
        value=True,
        key=key
    )
    if show_code:
        st.code(text, 'python')


def transform_data(data: pd.DataFrame) -> pd.DataFrame:
    """
    Applique des transformations au donn√©es de base data obtenue avec le fichier "MockPatientDatabaseOscar.csv".\\
    Dans l'ordre :
    - Ajout de la variable time2 qui indique le temps avant hospitalisation (0<time2<time).
    - Ajout de la variable hospitalisation qui indique si le patient a √©t√©  hospitalis√© ou non
    (environ 1/3 oui et 2/3 non).
    - Ajout de la tranche d'√¢ge du patient (< 50 ans, entre 50 ans et 64 ans, 65+).
    """
    # Parcours les lignes du dataFrame
    for i in range(len(data.index)):
        # Cr√©er la variable time2 compris entre [1; time - 1]
        data.loc[i, 'time2'] = randint(1, data.loc[i, 'time']-1)

        # Cr√©er la variable hospitalisation.
        # proba prend une valeur al√©atoire entre 1 et 3.
        proba = randint(1, 3)
        # Si strictement plus petite que 2 (1 chance sur 3) alors le patient est hospitalis√©.
        if proba < 2:
            data.loc[i, 'hospitalisation'] = True
        # Sinon (2 chances sur 3), le patient n'est pas hospitalis√©.
        else:
            data.loc[i, 'hospitalisation'] = False

        # Cr√©er la variable age entre 16 ans (√¢ge l√©gal pour r√©pondre √† des questionnaires sans autorisation parentale)
        # et 112 ans (√¢ge de la doyenne fran√ßaise en 2023).
        age = randint(16, 112)
        # En fonction du r√©sultat, le patient fait partie d'une tranche d'√¢ge diff√©rente.
        if age < 50:
            data.loc[i, 'tranche_age'] = "Age < 50"
        elif age < 65:
            data.loc[i, 'tranche_age'] = "Age 50 - 64"
        else:
            data.loc[i, 'tranche_age'] = "Age 65+"
    return data


def print_statistiques_descriptives(data: pd.DataFrame) -> None:
    """
    Affiche les statistiques d'une variable choisie parmis une liste d'options.
    """
    choice = st.selectbox(label="Variable :", options=constant.list_option_descriptives_label)
    stats = data[constant.option_descriptives.get(choice)].describe()
    st.write(stats)


def top_menu() -> None:
    """
    Affiche le menu horizontal et √©galement le contenu des pages une fois choisies sur le menu.
    """
    # Configuration du menu
    st.set_page_config(layout='wide', initial_sidebar_state='collapsed',)
    menu = hc.nav_bar(
        menu_definition=constant.menu,
        hide_streamlit_markers=True
    )

    # Affichage de la page d'accueil avec la pr√©sentation du sujet, des donn√©es, de python et des librairies utilis√©es.
    if menu == "home":
        "# üè† Accueil"
        st.write(text.home)
    # Affichage de la page de pr√©sentation des donn√©es (visualisation et explication)
    if menu == "data":
        "# üìñ Lecture des donn√©es"
        print_data(data)
        st.write(text.presentation_data)
        print_code(code_text.load_data, "load_data", True)
    # Affichage des donn√©es une fois transform√©e et explication du code utilis√© ainsi que de notre fa√ßon de faire.
    if menu == "transform-data":
        "# ‚öôÔ∏è Transformation des donn√©es"
        print_data(data_transform)
        st.write(text.presentation_transformation_title_time2)
        print_code(code_text.code_time2, "time2")
        st.write(text.presentation_transformation_hospitalisation)
        print_code(code_text.code_hospitalisation, "hospital")
        st.write(text.presentation_transformation_tranche_age)
        print_code(code_text.code_tranche_age, "tranche_age")
    # Affichage des statistiques descriptives
    if menu == "stats":
        "# üßÆ Statistiques descriptives"
        print_statistiques_descriptives(data_transform)
        print_code(code_text.code_stats_descriptives, "stats_descriptives", True)
    # Affichage des variables telles que demand√©es dans le sujet.
    if menu == "variables":
        "# üìä Repr√©sentations graphiques des variables"
    # Affichage des probabilit√©s de survie et des courbes de survie.
    if menu == "survie":
        "# üìà Probabilit√©s de survie et courbes de survie"
    # Affichage des pr√©dictions.
    if menu == "pr√©diction":
        "# üîé Pr√©diction de survie d'un individu"
    # Affichage de la r√©gression de Cox.
    if menu == "r√©gression":
        "# üìâ Mod√®le de r√©gression de Cox"
    # Affichage de l'analyse co√ªt-efficacit√©.
    if menu == "co√ªt-efficacit√©":
        "# üîé Analyse co√ªt-efficacit√©"


def left_menu() -> None:
    """
    Affiche des √©l√©ments dans le menu vertical gauche (natif √† streamlit).
    """
    st.sidebar.select_slider(
        label="Temps",
        options=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    )


# Charge les donn√©es
data = load_data()
# Charge les donn√©es transform√©es
data_transform = transform_data(data)

# Page web :
top_menu()
left_menu()
