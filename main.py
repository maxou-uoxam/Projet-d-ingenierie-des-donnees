# Import
import streamlit as st
import pandas as pd
import lifelines
import plotly.express as px
import plotly.graph_objects as go
import matplotlib as plt
from streamlit_option_menu import option_menu
import hydralit_components as hc
from random import randint

# Import files
import constant
import text
import code_text


# Fonctions
# Lecture du fichier de donn√©es
def load_data():
    data = pd.read_csv("donn√©es/MockPatientDatabaseOscar.csv", sep=";", encoding='latin-1')
    return data


def print_data(data):
    show_data = st.checkbox(
        label="Montrer les donn√©es",
        value=False
    )
    if show_data:
        st.write(data)


def print_code(text, key):
    show_code = st.checkbox(
        label="Montrer le code",
        value=True,
        key=key
    )
    if show_code:
        st.code(text, 'python')


def transform_data(data):
    for i in range(len(data.index)):
        data.loc[i, 'time2'] = data.loc[i, 'time'] - randint(1, data.loc[i, 'time']-1)
        x = randint(1, 9)
        if x < 3:
            data.loc[i, 'hospitalisation'] = True
        else:
            data.loc[i, 'hospitalisation'] = False
        age = randint(16, 102)
        if age < 50:
            data.loc[i, 'tranche_age'] = "Age < 50"
        elif age < 65:
            data.loc[i, 'tranche_age'] = "Age 50 - 64"
        else:
            data.loc[i, 'tranche_age'] = "Age 65+"
    return data


def top_menu():
    st.set_page_config(layout='wide', initial_sidebar_state='collapsed',)
    menu = hc.nav_bar(
        menu_definition=constant.menu,
        hide_streamlit_markers=True
    )

    # Affichage de la page d'accueil avec la pr√©sentation du sujet, des donn√©es, de python et des librairies utilis√©es.
    if menu == "home":
        "# üè† Accueil"
        st.write(text.home)
    
    # Affichage de la page de pr√©sentation des donn√©es (visualisation et explication)
    if menu == "data":
        "# üìñ Lecture des donn√©es"
        print_data(data)
        st.write(text.presentation_data)
    
    # Affichage des donn√©es une fois transform√©e et explication du code utilis√© ainsi que de notre fa√ßon de faire.
    if menu == "transform-data":
        "# ‚öôÔ∏è Transformation des donn√©es"
        print_data(data_transform)
        st.write(text.presentation_transformation_title_time2)
        print_code(code_text.code_time2, "time2")
        st.write(text.presentation_transformation_hospitalisation)
        print_code(code_text.code_hospitalisation, "hospital")
        st.write(text.presentation_transformation_tranche_age)
    
    # Affichage des statistiques descriptives
    if menu == "stats":
        "# üßÆ Statistiques descriptives"

    # Affichage des variables telles que demand√©es dans le sujet.
    if menu == "variables":
        "# üìä Repr√©sentations graphiques des variables"
    
    # Affichage des probabilit√©s de survie et des courbes de survie.
    if menu == "survie":
        "# üìà Probabilit√©s de survie et courbes de survie"
    
    # Affichage des pr√©dictions.
    if menu == "pr√©diction":
        "# üîé Pr√©diction de survie d'un individu"

    # Affichage de la r√©gression de Cox.
    if menu == "r√©gression":
        "# üìâ Mod√®le de r√©gression de Cox"
    
    # Affichage de l'analyse co√ªt-efficacit√©.
    if menu == "co√ªt-efficacit√©":
        "# üîé Analyse co√ªt-efficacit√©"


def left_menu():
    st.sidebar.select_slider(
        label="Temps",
        options=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    )


data = load_data()
data_transform = transform_data(data)

# Page web :
top_menu()
left_menu()
